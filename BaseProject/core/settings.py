"""
Django settings for BaseProject.Core.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import re
import sys
import json
import inspect
import environ
from pathlib import Path

from django.utils.translation import gettext_lazy as _


class BaseSettings:
    """ Community base settings, don't use this directly. """

    def __init__(self, *args, **kwargs):
        # Main Path
        self.BASE_DIR = Path(__file__).resolve().parent.parent.parent
        if os.environ['DJANGO_SETTINGS_MODULE'] == 'BaseProject.settings.dev':
            env_path = self.BASE_DIR / '.config_project/environ/dev/.env'
        elif os.environ['DJANGO_SETTINGS_MODULE'] == 'BaseProject.settings.production':
            env_path = self.BASE_DIR / '.config_project/environ/production/.env'
        else:
            env_path = None

        environ.Env.read_env(env_path)  # reading .env file and set user environment variables.
        env = environ.Env() # instance the environ object and read from user environment variables.
        self.env = env

        self.AUTH_USER_MODEL = env.str('AUTH_USER_MODEL', 'core_user.User')
        self.SECRET_KEY = env.str('SECRET_KEY')
        self.SITE_ID = env.int('SITE_ID', 1)
        self.ROOT_URLCONF = 'BaseProject.core.urls'

        # Debug settings
        self.DEBUG = env.bool('DEBUG')
        self.DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
        self.WSGI_APPLICATION = 'BaseProject.core.wsgi.application'

        # Admin Vars
        self.ADMIN_SITE_HEADER = env.str('ADMIN_SITE_HEADER', "BaseProject")
        self.ADMIN_SITE_TITLE = env.str('ADMIN_SITE_TITLE', "Base Project")
        self.ADMIN_SITE_INDEX_TITLE = env.str('ADMIN_SITE_INDEX_TITLE', "Base Project Index")
        self.SITE_URL = '/'  # ToDo => Cambiar por reverse resolution url

        # self.DEFAULT_FROM_EMAIL = env.str('DEFAULT_FROM_EMAIL')
        # settings EMAIL
        for _key, _val in env.email_url().items():
            setattr(self, _key, _val)

        self.FIXTURE_DIRS = [self.BASE_DIR / '.config_project/DB_Fixtures']
        self.MIDDLEWARE = [
            'django.middleware.security.SecurityMiddleware',
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.locale.LocaleMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.middleware.common.BrokenLinkEmailsMiddleware',
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
            'allauth.account.middleware.AccountMiddleware',
            "django_htmx.middleware.HtmxMiddleware",
            # 'corsheaders.middleware.CorsMiddleware',
        ]

        # Assets and Media
        # if env.bool('ENABLE_REMOTE_STORAGE'):
        #     self.AWS_STATIC_LOCATION = 'static'
        #     self.AWS_MEDIA_LOCATION = 'media'
        #     self.AWS_S3_OBJECT_PARAMETERS = {
        #         'CacheControl': 'max-age=86400',
        #     }
        #     bucket_name = env.str('BUCKET_NAME')
        #     self.AWS_STORAGE_BUCKET_NAME = F'{bucket_name}-bucket-service'
        #     self.AWS_S3_CUSTOM_DOMAIN = '{0}.s3.amazonaws.com'.format(self.AWS_STORAGE_BUCKET_NAME)
        #
        #     self.STATICFILES_STORAGE = 'BaseProject.core.custom_storages.CustomStaticStorage'
        #     self.DEFAULT_FILE_STORAGE = 'BaseProject.core.custom_storages.CustomMediaStorage'
        #     self.STATIC_URL = 'https://{0}/{1}/'.format(self.AWS_S3_CUSTOM_DOMAIN, self.AWS_STATIC_LOCATION)
        # else:
        self.STATIC_URL = '/static/'
        self.STATIC_ROOT = self.BASE_DIR / '.static'

        self.MEDIA_URL = '/media/'
        self.MEDIA_ROOT = self.BASE_DIR / '.media'

        self.STATICFILES_DIRS = [
            self.BASE_DIR / 'BaseProject/static',
        ]

        self.STATICFILES_FINDERS = [
            'django.contrib.staticfiles.finders.FileSystemFinder',
            'django.contrib.staticfiles.finders.AppDirectoriesFinder',
        ]

        self.TEMPLATE_ROOT = self.BASE_DIR / 'BaseProject/templates'

        self.TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [self.TEMPLATE_ROOT],
                'OPTIONS': {
                    'debug': self.DEBUG,
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                    'loaders': [
                        'django.template.loaders.filesystem.Loader',
                        'django.template.loaders.app_directories.Loader',
                    ],
                },
            },
        ]

        self.AUTHENTICATION_BACKENDS = [
            'django.contrib.auth.backends.ModelBackend',
            # 'allauth.account.auth_backends.AuthenticationBackend',
        ]

        self.LOGIN_URL = 'account_login'
        self.ACCOUNT_LOGOUT_REDIRECT_URL = 'account_login'

        self.REST_FRAMEWORK = {
            'DEFAULT_AUTHENTICATION_CLASSES': (
                'rest_framework.authentication.TokenAuthentication',
                'rest_framework.authentication.BasicAuthentication',
                'rest_framework.authentication.SessionAuthentication',
            ),
            'DEFAULT_PERMISSION_CLASSES': [
                'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
            ],
            'DEFAULT_THROTTLE_CLASSES': [
                'rest_framework.throttling.AnonRateThrottle',
                'rest_framework.throttling.UserRateThrottle',
            ],
            'DEFAULT_THROTTLE_RATES': {
                'anon': '300/minute',
                'user': '500/minute',
            }
        }

        self.TIME_ZONE = env.str('TIME_ZONE','America/Mexico_City')
        self.USE_TZ = env.bool('USE_TZ', True)
        self.LANGUAGE_CODE = env.str('LANGUAGE_CODE', 'es-mx')
        self.USE_I18N = env.bool('USE_I18N', True)
        self.USE_L10N = env.bool('USE_L10N', True)
        self.LOCALE_PATHS = [
            self.BASE_DIR / 'BaseProject/locale',
        ]

        self.LANGUAGES = [
            ('en-us', 'Inglés'),
            ('es-mx', 'Español'),
        ]

        self.AUTH_PASSWORD_VALIDATORS = [
            {
                'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
            },
        ]

        # Security & X-Frame-Options Middleware
        self.SECURE_BROWSER_XSS_FILTER = env.bool('SECURE_BROWSER_XSS_FILTER', True)
        self.SECURE_CONTENT_TYPE_NOSNIFF = env.bool('SECURE_CONTENT_TYPE_NOSNIFF', True)
        self.X_FRAME_OPTIONS = env.str('X_FRAME_OPTIONS', 'DENY')

        self.CORS_ALLOW_HEADERS = (
            'x-requested-with',
            'content-type',
            'accept',
            'origin',
            'authorization',
            'x-csrftoken'
        )
        # phone number field

        # taggit

        self.ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')
        self.INTERNAL_IPS = env.list('INTERNAL_IPS', default='127.0.0.1,')

        self.IGNORABLE_404_URLS = [
            re.compile(r'\.(php|cgi)$'),
            re.compile(r'^/phpmyadmin/'),
            re.compile(r'^/apple-touch-icon.*\.png$'),
            re.compile(r'^/favicon\.ico$'),
            re.compile(r'^/robots\.txt$'),
        ]

        self.LOGS_ROOT = self.BASE_DIR / '.logs'
        self.LOG_FORMAT = '|| %(levelname)s || %(asctime)s || %(module)s || %(name)s || %(lineno)s[%(process)d] || %(message)s'
        self.LOGGING = {
            'version': 1,
            'disable_existing_loggers': False,
            'formatters': {
                'default': {
                    'format': self.LOG_FORMAT,
                    'datefmt': '%d/%b/%Y %H:%M:%S',
                },
            },
            'filters': {
                'require_debug_true': {
                    '()': 'django.utils.log.RequireDebugTrue',
                },
                'require_debug_false': {
                    '()': 'django.utils.log.RequireDebugFalse',
                },
            },
            'handlers': {
                'console': {
                    'level': env('LOG_CONSOLE_LEVEL'),
                    'class': 'logging.StreamHandler',
                    'formatter': 'default'
                },
                'debug': {
                    'level': env('LOG_FILE_DJANGO_LEVEL'),
                    'class': 'logging.handlers.RotatingFileHandler',
                    'filename': self.LOGS_ROOT / 'django/debug.log',
                    'formatter': 'default',
                },
                'mail_admins': {
                    'level': 'ERROR',
                    'filters': ['require_debug_false'],
                    'formatter': 'default',
                    'class': 'django.utils.log.AdminEmailHandler',
                    'include_html': True,
                },
                'null': {
                    'class': 'logging.NullHandler',
                },
            },
            'loggers': {
                '': {
                    'handlers': ['debug', 'console', 'mail_admins'],
                    'level': 'DEBUG',
                },
                'django': {
                    'handlers': ['debug', 'console', 'mail_admins'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'BaseProject': {
                    'handlers': ['debug', 'console', 'mail_admins'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'django.security.DisallowedHost': {
                    'handlers': ['null'],
                    'propagate': False,
                },
            },
        }


    @property
    def ADMINS(self):  # noqa
        admins_emails = self.env.str('ADMINS', '[[]]')
        return list(email for email in json.loads(admins_emails))


    @property
    def MANAGERS(self):  # noqa
        managers_emails = self.env.str('MANAGERS', '[[]]')
        return list(email for email in json.loads(managers_emails))

    # Application Classes
    @property
    def INSTALLED_APPS(self):  # noqa
        apps = [
            # django apps
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'django.contrib.humanize',
            'django.contrib.sites',
            # Third party apps
            # 'phonenumber_field',
            # 'django_crontab',
            # 'rest_framework',
            # 'rest_framework.authtoken',
            # 'django_filters',
            # 'django_redis',
            # 'widget_tweaks',
            'allauth',
            'allauth.account',
            # 'allauth.socialaccount',
            "django_tables2",
            "django_filters",
            "django_htmx",
            # 'django_celery_beat',
            # 'taggit',
            # Project apps
            'BaseProject.apps.admin_portal',
            'BaseProject.apps.core_user'
        ]
        return apps

    @property
    def DATABASES(self):  # noqa
        _configuration = {}
        _caches = json.loads(self.env.str('DB_SETTINGS'))
        for _key in _caches.keys():
            _cache = _caches[_key]
            _configuration[_key] = {}
            _configuration[_key].update(self.env.db_url_config(_cache['url']))
        print(_configuration)
        return _configuration

    @property
    def CACHES(self):  # noqa
        configuration = {}
        _caches = json.loads(self.env('CACHE_SETTINGS'))
        for _key in _caches.keys():
            _cache = _caches[_key]
            configuration[_key] = self.env.cache_url_config(url=_cache['url'])
            if _cache['engine'] == 'redis':
                configuration[_key].update({'BACKEND': 'django.core.cache.backends.redis.RedisCache'})
                if 'key_prefix' in _cache:
                    configuration[_key].update({'KEY_PREFIX': _cache['key_prefix']})
                if 'timeout' in _cache:
                    configuration[_key].update({'TIMEOUT': _cache['timeout']})
                if 'version' in _cache:
                    configuration[_key].update({'VERSION': _cache['version']})
                if 'options' in _cache:
                    configuration[_key].update({'OPTIONS': _cache['options']})
        return configuration

    @property
    def LOGIN_REDIRECT_URL(self): # noqa
        login_redirect_url = self.env("LOGIN_REDIRECT_URL")
        return login_redirect_url

    @classmethod
    def load_settings(cls, module_name):
        """
        Export class variables and properties to module namespace.
        This will export and class variable that is all upper case and doesn't
        begin with ``_``. These members will be set as attributes on the module
        ``module_name``.
        """
        self = cls()
        module = sys.modules[module_name]
        for (member, value) in inspect.getmembers(self):
            if member.isupper() and not member.startswith('_'):
                if isinstance(value, property):
                    value = value.fget(self)
                setattr(module, member, value)

